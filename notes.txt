5/9/2016
-do something better for drawing grids -> stop normalizing around max on grid [done]
-do a walk through [done]
  -found some clarifications on cost field stuff. yay!
-try bilinear interpolating the velocity instead of just double-linear
-try distance enforcement

5/5/2016
-fresh start notes
-ok. each grid cell stores:
  -discomfort - any cells touching obstacles. we'll just support round ones for now
  -density - computed by potential
  -splatting - computed by fast flood fill
  -avg_velocity (two floats) -> equation 7
-on faces:
  -aniso: flow speed INTO each neighbor -> equation 9, 10
  -aniso: cost INTO each neighbor -> computed from flow speed here and discomfort here -> equation 4  
  -dPotential, between this cell and next
  -velocity computed from dPotentials and speed field value pointing the same way as dPotential

TODO:
  -reimplement global continuum grid
    -have manager scan all the items in the sim to set grid size [done]
      -so it turns out if we're scanning all the goals, those aren't available in preprocess
      -but they ARE available on the first frame
      -so we have to actually build the grids on the first frame of continuumModule.preprocessFrame()
    -have manager be able to draw a single floatGrid2D if needed -> make sure there's cell separation [done]
    -we'll still do it as a bunch of grids of the same resolution, with some representing faces
    -for non-aniso face values, we'll just store duplicates for now -> easier
  -reimplement potential grid
  -reimplement algorithm
  -optimization
    -have manager check if agents have same goal, let them share a potential grid
    -all params except potential are universal!


Algorithm
0) splat obstacles onto discomfort grid -> precomputation on sim init, basically. do this like agent density splatting.

1) splat agents onto density grid and avg_velocity grids -> section 4.1 + equation 7 [done]
2) compute anisotrop flow speed INTO each neighbor -> equation 9, 10 [done]
3) compute anisotrop cost INTO each neighbor -> equation 4. see section 4.2, beware typos [done]
4) compute potential field with fast flood fill
5) compute dPotential, renormalize -> I'm guessing... divide everything by max so grad tops out at 1?
6) compute velocity at each wall with anisotropic speed selected by direction of dPotential
7) bilinear interp each agent's velocity
8) advect


4/26/2016
-debugging notes
  -MAKE SURE WE'RE CHANGING ARGS FOR THE RIGHT BUILD MODE -> DEBUG!
  -can view command prompt with linker -> system -> console
  -in config -> debugging -> need to set workign dir to bin
  -can provide args in command args

TODO
-make it so the agents too have a new init method that adds the grids
  -this way we can build grids according to an AABB
  -actually, first figure out why some grid resolutions cause dramatic crashes -> probably something broken in grid?
-add potential drawing
-work out obstacles

4/25/2016
-add dynamic grid size -> ehhhh. steersuite is broken like that right now.
  -turns out gSpatialDatabase ISN'T using the loaded grid size
  -see TestCaseReader -> the grid with loaded size gets deleted and lost and isn't percolated down
  -new idea: let's compute grid size based on an AABB of all the objects in the scene
-figure out what causes breaking in cases like 3-squeeze [done]
  -turns out the grid size we were providing was too small
  -bad, bad, bad.
-add obstacles

// sample drawing a blue quad. POTENTIALLY useful (see what I did there?)
// slap this in any agent's draw method
Util::Point p1 = Util::Point(1.0, 0.0, 1.0);
Util::Point p2 = Util::Point(1.0, 0.0, -1.0);
Util::Point p3 = Util::Point(-1.0, 0.0, -1.0);
Util::Point p4 = Util::Point(-1.0, 0.0, 1.0);

Util::DrawLib::glColor(Util::gBlue);
Util::DrawLib::drawQuad(p1, p2, p3, p4);

**************************************************************************************************************************
TODO
-finish finite diff approximation [done]
-finish splatGoal [done]
-module constructor [done]
-agent constructor [done]
-module frame preprocess [done]
-agent update using grid potential [done]
-debug debug debug


Current understanding of SteerSuite:
-each type of sim gets a module and agents
-agents are built from the module
  -so the module can pass things in as needed
  -presumably the module is allowed to store pointers to the agents too
  -so we can override steersuite's storage
  -the module can "preprocess" and "postprocess" frames

Things to find out:
  -how to grab obstacles from the simulation? -> after Thurs?

Algorithm:
-we're going to make each agent its own group (blaw)
  -b/c test cases might not allow otherwise?
  -we may be able to preprocess agents by goal, but -> after Thurs
-requires a 2D MAC Grid

-each timestep:
  -module preprocess: snapshot of current situation
    -build global density field on mac grid (section 4.1)
    -build global average velocity field on mac grid (equation 7)

  -module preprocess: computing new optimal paths for each group
    -for each agent, build speed field for agent (section 4.2 and equation 10, remove fT terms)
      -needs: density at some point where agent wants to go
      -needs: density/average velocity fields from earlier

    -for each agent, build potential field -> section 4.3
      -TODO
      -involves a kind of "flood fill" using a heap (or just a queue)
      -since we don't have heights here, can we just use radial distance from the goal? -> NO. C depends on speed field
      -start with 0 as the potential in the cell with the goal, INF everywhere else
      -add all neighbors to "explore me" list
        -for neighbor in neighbors, compute:
          -smallest 2 potential + cost sums of all neighbors in x and z directions
            -cost is basically a weighted sample of speed at boundary
          -this lets us compute potential by quadratic equation
      -compute potential gradients by just diffing neighboring grid cells after all potentials made


  -agent process:
    -sample personal speed and density grids where agent is now to get a velocity -> end of section 4.3
    -update locations -> tweak what simpleAI already gives

-location enforcement
  -bin all agents onto a neighbor grid of cell size r
  -at each grid
    -for each agent
        -check 9 grids centered around this one for neighbors
        -move self and neighbor if any are closer than r


Notes:
-we'll store unit cost fields in the module, although initially 1 per agent
  -agents will have pointers to their unit cost fields
  -eventually this will let us have them share unit cost fields


TODO:
-come up with a better mac grid representation
  -need to be able to get/set staggered value given a cell index
  -need a function to compute cell index from position
